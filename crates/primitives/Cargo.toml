[package]
description = "Commonly used types in reth."
edition.workspace = true
homepage.workspace = true
license.workspace = true
name = "reth-primitives"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[lints]
workspace = true

[dependencies]
# reth
reth-codecs = { workspace = true, optional = true }
reth-ethereum-forks.workspace = true
reth-primitives-traits.workspace = true
reth-static-file-types.workspace = true
reth-trie-common.workspace = true
revm-primitives = { workspace = true, features = ["serde"] }

# op-reth
reth-optimism-chainspec = { workspace = true, optional = true }

# ethereum
alloy-consensus.workspace = true
alloy-eips = { workspace = true, features = ["serde"] }
alloy-primitives = { workspace = true, features = ["rand", "rlp"] }
alloy-rlp = { workspace = true, features = ["arrayvec"] }
alloy-rpc-types = { workspace = true, features = ["engine"] }
alloy-serde = { workspace = true, optional = true }
# optimism
op-alloy-consensus = { workspace = true, features = [
    "arbitrary",
], optional = true }
op-alloy-rpc-types = { workspace = true, optional = true }

# crypto
k256.workspace = true
secp256k1 = { workspace = true, features = [
    "global-context",
    "rand",
    "recovery",
], optional = true }
# for eip-4844
c-kzg = { workspace = true, features = ["serde"], optional = true }

# misc
bytes.workspace = true
derive_more.workspace = true
modular-bitfield = { workspace = true, optional = true }
once_cell.workspace = true
rand = { workspace = true, optional = true }
rayon.workspace = true
serde.workspace = true
serde_with = { workspace = true, optional = true }
zstd = { workspace = true, features = ["experimental"], optional = true }

# arbitrary utils
arbitrary = { workspace = true, features = ["derive"], optional = true }
proptest = { workspace = true, optional = true }

[dev-dependencies]
# eth
reth-chainspec.workspace = true
reth-codecs.workspace = true
reth-primitives-traits = { workspace = true, features = ["arbitrary"] }
reth-testing-utils.workspace = true
revm-primitives = { workspace = true, features = ["arbitrary"] }

alloy-eips = { workspace = true, features = ["arbitrary"] }
alloy-genesis.workspace = true

arbitrary = { workspace = true, features = ["derive"] }
assert_matches.workspace = true
bincode.workspace = true
modular-bitfield.workspace = true
proptest-arbitrary-interop.workspace = true
proptest.workspace = true
rand.workspace = true
serde_json.workspace = true
test-fuzz.workspace = true

criterion.workspace = true
pprof = { workspace = true, features = [
    "criterion",
    "flamegraph",
    "frame-pointer",
] }

[features]
alloy-compat = [
    # "dep:alloy-rpc-types",
    "dep:alloy-serde",
    "dep:op-alloy-rpc-types",
]
arbitrary = [
    "alloy-eips/arbitrary",
    "dep:arbitrary",
    "dep:proptest",
    "rand",
    "reth-codec",
    "reth-ethereum-forks/arbitrary",
    "reth-primitives-traits/arbitrary",
    "revm-primitives/arbitrary",
    "secp256k1",
]
asm-keccak = ["alloy-primitives/asm-keccak"]
c-kzg = [
    "alloy-consensus/kzg",
    "alloy-eips/kzg",
    "dep:c-kzg",
    "revm-primitives/c-kzg",
]
default = ["alloy-compat", "c-kzg", "reth-codec", "secp256k1", "std"]
optimism = [
    "dep:op-alloy-consensus",
    "dep:reth-optimism-chainspec",
    "reth-codecs?/optimism",
    "revm-primitives/optimism",
]
reth-codec = ["dep:modular-bitfield", "dep:reth-codecs", "dep:zstd", "std"]
secp256k1 = ["dep:secp256k1"]
serde-bincode-compat = [
    "alloy-consensus/serde-bincode-compat",
    "op-alloy-consensus?/serde-bincode-compat",
    "reth-primitives-traits/serde-bincode-compat",
    "serde_with",
]
std = ["reth-primitives-traits/std"]
test-utils = ["reth-primitives-traits/test-utils"]

[[bench]]
harness = false
name = "recover_ecdsa_crit"

[[bench]]
harness = false
name = "validate_blob_tx"
required-features = ["arbitrary", "c-kzg"]
